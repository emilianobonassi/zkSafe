// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.17;

import "forge-std/console.sol";
import {HydraS2BaseTest} from "./HydraS2BaseTest.t.sol";
import "src/libs/zk-connect/ZkConnectLib.sol";

contract ZkConnectTest is HydraS2BaseTest {
  // function test_ZkConnect() public {
  //     bytes16 groupId = 0xe9ed316946d3d98dfcd829a53ec9822e;
  //     address user = 0x7def1d6D28D6bDa49E69fa89aD75d160BEcBa3AE;
  //     // ZkConnectResponse memory zkConnectResponse = hydraS2Proofs.getZkConnectResponse1();
  //     bytes memory zkResponseEncoded = hex"0000000000000000000000000000000000000000000000000000000000000020f68985adfc209fafebfb1a956913e7fa00000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007a6b2d636f6e6e6563742d76320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000540e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007def1d6d28d6bda49e69fa89ad75d160becba3ae00000000000000000000000000000000000000000000000000000000000002c0220ec2678460ece47a0a7d64eb05529881d9056f89965157de6043b913fa1ac817984c470e3c6c06146d7adbc299fc7e7b1828813afe1b91986f1219c5c424332ec6e6957db805a319019526e7bc7ca34b3c069f153b2f6f7ede5bb42a2181ac159a93759a5eb820ebaa8b0aa1bc3da1e3ca3b79701f13c723741d78a80c48d403867770c85a774446e110f39ef9154f9c79aa98d4ddb499f31fd643393498992d84dbedbfe25599fc7c8a8ca74f79e251eab78eb803cf2d4792587b560ac71111e5eb59ebf229fdad2d142d0929dc6add9e5e110fc2b6da0b25d3eb2a14b031293e68a737ad08e26f526ec522504300995058df6d3c8c4644500f006b66807e000000000000000000000000000000000000000000000000000000000000000009f60d972df499264335faccfc437669a97ea2b6c97a1a7ddf3f0105eda34b1d07f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb920706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa2db629f18dc904ef403dd497303d02e8f0b4059786899373d734f3c6389442ec0edcebd3d30d0a9e5ba1fbaae8057165de46b61ddc5e81b1701dbf79995d77e51f853dbff160e80ee19ed2e3ae534c228873736d841ecec2339564c28a31db2d0000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc000000000000000000000000000000000000000000000000000000000000000015fb9d7ca9f692b09201b5277a41f295ce6530786b4ce23051ef72c53252097300000000000000000000000000000000f68985adfc209fafebfb1a956913e7fa000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
  //     Claim memory claimRequest = ClaimRequestLib.build({groupId: 0xe9ed316946d3d98dfcd829a53ec9822e});
  //     ZkConnectRequestContent memory zkConnectRequestContent =
  //         ZkConnectRequestContentLib.build({claimRequest: claimRequest, messageSignatureRequest: abi.encodePacked(user)});
  //     ZkConnectVerifiedResult memory zkConnectVerifiedResult =
  //         zkConnectVerifier.verify(zkResponseEncoded, zkConnectRequestContent);
  //     console.log("userId: %s", zkConnectVerifiedResult.verifiedAuths[0].userId);
  // }
}
